services:
    laravel.test:
        build:
            context: './vendor/laravel/sail/runtimes/8.4'
            dockerfile: Dockerfile
            args:
                WWWGROUP: '${WWWGROUP}'
        image: 'sail-8.4/app'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        ports:
           # - '${APP_PORT:-80}:80'
            - '${VITE_PORT:-5173}:${VITE_PORT:-5173}'
        environment:
            WWWUSER: '${WWWUSER}'
            LARAVEL_SAIL: 1
            XDEBUG_MODE: '${SAIL_XDEBUG_MODE:-off}'
            XDEBUG_CONFIG: '${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}'
            IGNITION_LOCAL_SITES_PATH: '${PWD}'
            MONGO_DB_CONNECTION: '${MONGO_DB_CONNECTION}'
            MONGO_DB_HOST: '${MONGO_DB_HOST}'
            MONGO_DB_PORT: '${MONGO_DB_PORT}'
            MONGO_DB_DATABASE: '${MONGO_DB_DATABASE}'
            MONGO_DB_USERNAME: '${MONGO_DB_USERNAME}'
            MONGO_DB_PASSWORD: '${MONGO_DB_PASSWORD}'
        volumes:
            - '.:/var/www/html'
            - './docker/sail/supervisor/php-fpm.conf:/etc/supervisor/conf.d/php-fpm.conf'
        networks:
            - sail
        depends_on:
            - pgsql
            - redis
            - mongodb  # MongoDB debe estar disponible antes de Laravel
    pgsql:
        image: 'postgres:17'
        ports:
            - '${FORWARD_DB_PORT:-5432}:5432'
        environment:
            PGPASSWORD: '${DB_PASSWORD:-secret}'
            POSTGRES_DB: '${DB_DATABASE}'
            POSTGRES_USER: '${DB_USERNAME}'
            POSTGRES_PASSWORD: '${DB_PASSWORD:-secret}'
        volumes:
            - 'sail-pgsql:/var/lib/postgresql/data'
            - './vendor/laravel/sail/database/pgsql/create-testing-database.sql:/docker-entrypoint-initdb.d/10-create-testing-database.sql'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - pg_isready
                - '-q'
                - '-d'
                - '${DB_DATABASE}'
                - '-U'
                - '${DB_USERNAME}'
            retries: 3
            timeout: 5s
    redis:
        image: 'redis:alpine'
        ports:
            - '${FORWARD_REDIS_PORT:-6379}:6379'
        volumes:
            - 'sail-redis:/data'
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - redis-cli
                - ping
            retries: 3
            timeout: 5s
    mongodb:  # Contenedor MongoDB
        image: 'mongo:latest'
        container_name: 'mongodb'
        ports:
            - '27017:27017'
        environment:
            MONGO_INITDB_ROOT_USERNAME: '${MONGO_DB_USERNAME}'
            MONGO_INITDB_ROOT_PASSWORD: '${MONGO_DB_PASSWORD}'
            MONGO_INITDB_DATABASE: '${MONGO_DB_DATABASE}'
        volumes:
            - 'sail-mongo:/data/db'
            -  ./initMongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
        networks:
            - sail
        healthcheck:
            test:
                - CMD
                - mongo
                - --eval
                - 'db.runCommand({ connectionStatus: 1 })'
            retries: 3
            timeout: 5s

    proxy:
        image: nginx:latest
        container_name: proxy
        restart: always
        depends_on:
            - laravel.test
        ports:
            - "80:80"
        volumes:
            - ./docker/sail/nginx/nginx.conf:/etc/nginx/nginx.conf
        networks:
            - sail


    coverage:
        image: nginx:latest
        container_name: coverage
        restart: always
        depends_on:
            - laravel.test
        volumes:
            - ./coverage-report:/var/www/html/
            - ./coverage-report:/usr/share/nginx/html/coverage/
            - ./docker/sail/sites-available:/etc/nginx/sites-available
        networks:
            - sail

networks:
    sail:
        driver: bridge

volumes:
    sail-pgsql:
        driver: local
    sail-redis:
        driver: local
    sail-mongo:  # Volumen persistente para MongoDB
        driver: local
